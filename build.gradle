buildscript {
    repositories {
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "com.gradle.publish:plugin-publish-plugin:${rootProject.property('gradle.publish.plugin.version')}"
    }
}

plugins {
    id 'java-gradle-plugin'
}

apply plugin: 'groovy'
apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: "com.gradle.plugin-publish"

ext {
    user = 'xbib'
    name = 'gradle-plugin-jacc'
    pluginDescription = 'Gradle plugin for using Jacc'
    scmUrl = 'https://github.com/' + user + '/' + name
    scmConnection = 'scm:git:git://github.com/' + user + '/' + name + '.git'
    scmDeveloperConnection = 'scm:git:git://github.com/' + user + '/' + name + '.git'
}

gradlePlugin {
    plugins {
        jaccPlugin {
            id = 'org.xbib.gradle.plugin.jacc'
            implementationClass = 'org.xbib.gradle.plugin.JaccPlugin'
        }
    }
}

wrapper {
    gradleVersion = "${project.property('gradle.wrapper.version')}"
    distributionType = Wrapper.DistributionType.ALL
}

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
}

configurations {
  wagon
}

dependencies {
    implementation gradleApi()
    implementation "org.xbib:jacc:${project.property('jacc.version')}"
    testImplementation gradleTestKit()
    testImplementation "org.junit.jupiter:junit-jupiter-api:${project.property('junit.version')}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${project.property('junit.version')}"
    testImplementation "org.apache.logging.log4j:log4j-core:${project.property('log4j.version')}"
    wagon "org.apache.maven.wagon:wagon-ssh:${project.property('wagon.version')}"
}


compileJava {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

compileTestJava {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

test {
    useJUnitPlatform()
    failFast = true
    testLogging {
        showStandardStreams = true
        events 'STARTED', 'PASSED', 'FAILED', 'SKIPPED'
    }
    afterSuite { desc, result ->
        if (!desc.parent) {
            println "\nTest result: ${result.resultType}"
            println "Test summary: ${result.testCount} tests, " +
                    "${result.successfulTestCount} succeeded, " +
                    "${result.failedTestCount} failed, " +
                    "${result.skippedTestCount} skipped"
        }
    }
}

if (project.hasProperty('gradle.publish.key')) {
    pluginBundle {
        website = scmUrl
        vcsUrl = scmUrl
        plugins {
            jaccPlugin {
                id = 'org.xbib.gradle.plugin.jacc'
                description = pluginDescription
                displayName = 'Gradle Jacc plugin'
                tags = ['jacc']
                version = project.version
            }
        }
    }
}
